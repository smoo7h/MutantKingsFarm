{"version":3,"sources":["utils/erc721.ts","hooks/useTokenBalance.ts","components/UnlockButton.tsx","utils/getReward.ts","hooks/useFetchKingsReward.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getNftTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","balance","useNftBalance","useState","BigNumber","setBalance","useWallet","account","ethereum","fastRefresh","useRefresh","useEffect","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","bal","useTokenBalance","getTokenBalance","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","getReward","web3","getWeb3","yieldhub","YieldHubAbi","getYieldHubAddress","getTotalClaimable","getKingsAddress","useFetchKingsReward","balances","fetchKingsRewardBalance","returnData","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","fetchBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","Row","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","kingsBalance","eggPrice","usePriceCakeBusd","toNumber","allEarnings","kingsReward","kingsRewardNum","pow","reduce","accum","earning","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","process","alt","width","height","toFixed","id","disabled","length","fullWidth","StyledCakeStats","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","crownsPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/17.3d835a53.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/mutantnft.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getNftTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getNftTokenBalance } from 'utils/erc721'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useNftBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getNftTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","/* eslint-disable import/no-unresolved */\nimport { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport YieldHubAbi from 'config/abi/yieldhub.json'\nimport { getCakeAddress, getMulticallAddress, getKingsAddress, getYieldHubAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst getReward = async (account: string) => {\n  const web3 = getWeb3()\n  const yieldhub = new web3.eth.Contract(YieldHubAbi as unknown as AbiItem, getYieldHubAddress())\n\n  const balance: string = await yieldhub.methods.getTotalClaimable(account, getKingsAddress()).call()\n\n  return balance\n}\n\nexport default getReward\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getKingsAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport getReward from 'utils/getReward'\nimport useRefresh from './useRefresh'\n\nconst useFetchKingsReward = () => {\n  const [balances, setBalance] = useState('0')\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchKingsRewardBalance = async () => {\n      const returnData = await getReward(account)\n\n      setBalance(returnData)\n    }\n\n    if (account) {\n      fetchKingsRewardBalance()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useFetchKingsReward\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCrowns',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCrowns',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","/* eslint-disable prefer-template */\nimport React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress, getKingsAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport useFetchKingsReward from '../../../hooks/useFetchKingsReward'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-around;\n  margin-bottom: 8px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const kingsBalance = getBalanceNumber(useTokenBalance(getKingsAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const kingsReward = useFetchKingsReward()\n  const kingsRewardNum = new BigNumber(kingsReward).div(new BigNumber(10).pow(18)).toNumber()\n\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <Row>\n          <CardImage src={process.env.PUBLIC_URL + \"/images/egg/2.png\"} alt=\"cake logo\" width={64} height={64} />\n          <CardImage src={process.env.PUBLIC_URL + \"/images/farms/kings.png\"} alt=\"cake logo\" width={64} height={64} />\n        </Row>\n        <Row>\n          <Block>\n            <Label>{TranslateString(544, 'Crowns to Harvest')}</Label>\n            <CakeHarvestBalance earningsSum={earningsSum} />\n            <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n          </Block>\n          <Block>\n            <Label>{TranslateString(545, 'Kings to Harvest')}</Label>\n            <CakeHarvestBalance earningsSum={kingsRewardNum} />\n            <Label>~${(eggPrice * kingsRewardNum).toFixed(2)}</Label>\n          </Block>\n        </Row>\n        <Row>\n          <Block>\n            <Label>{TranslateString(546, 'Crowns in Wallet')}</Label>\n            <CakeWalletBalance cakeBalance={cakeBalance} />\n            <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n          </Block>\n          <Block>\n            <Label>{TranslateString(547, 'Kings in Wallet')}</Label>\n            <CakeWalletBalance cakeBalance={kingsBalance} />\n            <Label>~${(eggPrice * kingsBalance).toFixed(2)}</Label>\n          </Block>\n        </Row>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CROWN')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let crownsPerBlock = 0\n  if (farms && farms[0] && farms[0].crownsPerBlock) {\n    crownsPerBlock = new BigNumber(farms[0].crownsPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Crowns Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CROWN/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {crownsPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'inukings',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'InuKings Club')}\n        </Heading>\n        <Text>{TranslateString(578, 'Welcome to the InuKings Club.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}