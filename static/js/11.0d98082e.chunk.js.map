{"version":3,"sources":["hooks/useStake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","utils/getLiquidityUrlPathParts.ts","utils/erc721.ts","hooks/useTokenBalance.ts","config/index.ts","components/layout/Flex.tsx","components/Tags.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","utils/getReward.ts","hooks/useFetchKingsReward.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/NftFarm/components/FarmCard/DetailsSection.tsx","views/NftFarm/components/FarmCard/CardHeading.tsx","views/NftFarm/components/DepositModal.tsx","views/NftFarm/components/WithdrawModal.tsx","views/NftFarm/components/FarmCard/StakeAction.tsx","views/NftFarm/components/FarmCard/HarvestAction.tsx","views/NftFarm/components/FarmCard/CardActionsContainer.tsx","views/NftFarm/components/FarmCard/FarmCard.tsx","views/NftFarm/components/FarmTabButtons/index.tsx","views/NftFarm/components/Divider.tsx","views/NftFarm/NftFarm.tsx"],"names":["useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","handleStake","useCallback","amount","stake","txHash","fetchFarmUserDataAsync","console","info","onStake","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","getContract","provider","address","Web3","eth","Contract","erc20","getNftTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","balance","useNftBalance","useState","setBalance","ethereum","fastRefresh","useRefresh","useEffect","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","bal","useTokenBalance","getTokenBalance","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","NoFeeTag","variant","outline","startIcon","NoStakingTag","useApprove","lpContract","onApprove","approve","tx","useUnstake","handleUnstake","unstake","onUnstake","getReward","web3","getWeb3","yieldhub","YieldHubAbi","getYieldHubAddress","getTotalClaimable","getKingsAddress","useFetchKingsReward","balances","fetchKingsRewardBalance","returnData","Wrapper","ExpandableSectionButton","expanded","role","color","bold","defaultProps","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","CardHeading","Tag","multiplier","risk","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","StakeAction","stakedBalance","tokenBalance","nftBalance","getBalanceNumber","getNftAddress","useModal","BalanceAndCompound","HarvestAction","earnings","onReward","useYieldhubHarvest","rawEarningsBalance","displayBalance","marginBottom","Action","CardActions","farm","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","kingsReward","isGreaterThan","pow","toNumber","error","textTransform","fontSize","pr","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","cakePrice","bnbPrice","showExpandableSection","setShowExpandableSection","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Text","textSubtle","NftFarm","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","activeFarms","filter","inactiveFarms","farmsList","userData","farmsToDisplay","cakeRewardPerYear","crownsPerBlock","poolWeight","apy","comparedTo","Page","style","textAlign","exact","responsive"],"mappings":"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","file":"static/js/11.0d98082e.chunk.js","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/mutantnft.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getNftTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getNftTokenBalance } from 'utils/erc721'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useNftBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getNftTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst NoStakingTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    Staking not required\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, NoStakingTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","/* eslint-disable import/no-unresolved */\nimport { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport YieldHubAbi from 'config/abi/yieldhub.json'\nimport { getCakeAddress, getMulticallAddress, getKingsAddress, getYieldHubAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst getReward = async (account: string) => {\n  const web3 = getWeb3()\n  const yieldhub = new web3.eth.Contract(YieldHubAbi as unknown as AbiItem, getYieldHubAddress())\n\n  const balance: string = await yieldhub.methods.getTotalClaimable(account, getKingsAddress()).call()\n\n  return balance\n}\n\nexport default getReward\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getKingsAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport getReward from 'utils/getReward'\nimport useRefresh from './useRefresh'\n\nconst useFetchKingsReward = () => {\n  const [balances, setBalance] = useState('0')\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchKingsRewardBalance = async () => {\n      const returnData = await getReward(account)\n\n      setBalance(returnData)\n    }\n\n    if (account) {\n      fetchKingsRewardBalance()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useFetchKingsReward\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","/* eslint-disable react/require-default-props */\nimport React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://exchange.goosedefi.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.goosedefi.com/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","/* eslint-disable prefer-template */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, NoStakingTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={process.env.PUBLIC_URL + `/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">Mutant Kings NFT</Heading>\n        <Flex justifyContent=\"center\">\n          <NoStakingTag />\n\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          {/* <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag> */}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useTokenBalance, { useNftBalance } from 'hooks/useTokenBalance'\n\nimport { getKingsAddress, getNftAddress } from 'utils/addressHelpers'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const nftBalance = getBalanceNumber(useNftBalance(getNftAddress()))\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'text' : 'text'}>{nftBalance * 1000000000000000000}</Heading>\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useYieldhubHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useYieldhubHarvest()\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport useFetchKingsReward from 'hooks/useFetchKingsReward'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const kingsReward = useFetchKingsReward()\n  const kingsRewardNum = new BigNumber(kingsReward).div(new BigNumber(10).pow(18)).toNumber()\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          KINGS\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={new BigNumber(kingsReward)} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          Inukings Mutants\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Held\n        </Text>\n      </Flex>\n      {renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const farmImage = 'kings'\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'KINGS'\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.pid === 0 && <StyledCardAccent />}\n      {farm.pid === 1 && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>KINGS</Text>\n      </Flex>\n\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://kovan.etherscan.io/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://kovan.etherscan.io/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","/* eslint-disable prefer-template */\nimport React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nconst NftFarm: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && farm.pid !== 6)\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.crownsPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        Hold MutantKings NFTs to earn KINGS\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            <FarmCard\n              key=\"mutantkingnft\"\n              farm={activeFarms[0]}\n              removed={false}\n              bnbPrice={bnbPrice}\n              cakePrice={cakePrice}\n              ethereum={ethereum}\n              account={account}\n            />\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image\n        src={process.env.PUBLIC_URL + '/images/egg/8.png'}\n        alt=\"illustration\"\n        width={1352}\n        height={587}\n        responsive\n      />\n    </Page>\n  )\n}\n\nexport default NftFarm\n"],"sourceRoot":""}