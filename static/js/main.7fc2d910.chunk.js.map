{"version":3,"sources":["config/constants/types.ts","config/constants/contracts.ts","utils/multicall.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","views/Nft/components/NftGlobalNotification.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","utils/web3.ts","contexts/Localisation/translationsContext.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx"],"names":["QuoteToken","PoolCategory","cake","kings","nft","yieldhub","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","multicall","abi","calls","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","i","decodeFunctionResult","GlobalStyle","createGlobalStyle","theme","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","React","createContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","process","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","children","useState","translations","setTranslations","useEffect","storedLangCode","localStorage","getItem","storedLang","filter","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","data","length","catch","e","error","Provider","value","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","useContext","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","account","connect","reset","cakePriceUsd","usePriceCakeBusd","login","logout","currentLang","langs","setLang","toNumber","links","priceLink","Wrapper","styled","Page","PageLoader","ModalContent","div","Actions","NftYouWonModal","onDismiss","TranslateString","useI18n","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","useRef","Home","lazy","Farms","NftFarms","NotFound","BigNumber","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","useFetchPublicData","basename","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","block","setBlock","interval","setInterval","getBlockNumber","blockNumber","current","clearInterval","configureStore","devTools","reducer","farms","farmsReducer","pools","poolsReducer","Providers","rpcUrl","getRpcUrl","chainId","store","connectors","walletconnect","RefreshContext","ReactDOM","render","StrictMode","document","getElementById","getCakeAddress","addresses","getKingsAddress","getNftAddress","getYieldHubAddress","getMasterChefAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","nonBnbPools","poolsConfig","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","CHAIN_ID","erc20ABI","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","_hex","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingCrowns","pendingReward","initialState","PoolsSlice","createSlice","reducers","setPoolsPublicData","state","action","livePoolsData","payload","livePoolData","find","entry","setPoolsUserData","userData","userPoolData","updatePoolsUserData","field","findIndex","actions","fetchPoolsUserDataAsync","dispatch","stakingTokenBalances","allowance","stakingTokenBalance","stakedBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","pid","risk","isTokenOnly","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","quoteTokenSymbol","BUSD","quoteTokenAdresses","contracts","CAKE","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState","TranslationsContext","fetchFarms","Promise","all","farmsConfig","farmConfig","lpAdress","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","pow","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","crownsPerBlock","allocPoint","poolWeight","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","masterChefAdress","farm","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","ZERO","useDispatch","slowRefresh","useRefresh","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","useTotalValue","bnbPrice","cakePrice","val","plus","nodes","getNodeUrl","randomIndex","random","slow","fast","RefreshContextProvider","setSlow","setFast","prev","fastRefresh","variableRegex","getTranslation","translationId","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","Container","mediaQueries","sm","lg"],"mappings":"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","file":"static/js/main.7fc2d910.chunk.js","sourcesContent":["export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  42: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","export default {\n  cake: {\n    42: '0x98378d47F93333CfEa1Fc0a6DD4e3d364DFAC8c4',\n    97: '',\n  },\n  kings: {\n    42: '0x6207C9B872055822CC646dF590a273d152410d9e',\n    97: '',\n  },\n  nft: {\n    42: '0x7f1FA59a7C1571711599804020F4FA3b88a8A742',\n    97: '',\n  },\n  yieldhub: {\n    42: '0x435237ca52C7Cc4b8d93715B80ca9AbD11B35a93',\n    97: '',\n  },\n  masterChef: {\n    42: '0x124B597eC35e8c3ABbB6E614219F6eFc4f9e47da',\n    97: '',\n  },\n  wbnb: {\n    42: '0xd0a1e359811322d97991e03f863a0c30c2cf029c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    42: '0x892834509Bddba9D2857bd0b278772a6ae4B5c51',\n    97: '0x892834509Bddba9D2857bd0b278772a6ae4B5c51',\n  },\n  busd: {\n    42: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n    97: '',\n  },\n}\n","/* eslint-disable import/no-unresolved */\nimport { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport CakeAbi from 'config/abi/cake.json'\nimport { getCakeAddress, getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\n\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : true\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://app.sushi.com/swap?tokens=0xb7a4F3E9097C08dA09517b5aB877F7a917224ede&tokens=0x98378d47F93333CfEa1Fc0a6DD4e3d364DFAC8c4&chainId=42',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://app.sushi.com/legacy/add/0xb7a4F3E9097C08dA09517b5aB877F7a917224ede/0x98378d47F93333CfEa1Fc0a6DD4e3d364DFAC8c4?chainId=42',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n  {\n    label: 'NFT Farm',\n    icon: 'VaultsIcon',\n    href: '/nftfarm',\n  },\n  // {\n  //   label: 'Pools',\n  //   icon: 'PoolIcon',\n  //   href: '/pools',\n  // },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'QuickSwap',\n        href: 'https://quickswap.exchange/#/swap',\n      },\n      {\n        label: 'Opensea',\n        href: 'https://opensea.io/collection/inu-kings-club',\n      },\n      {\n        label: 'DexScreener',\n        href: 'https://dexscreener.com',\n      },\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/',\n      },\n      {\n        label: 'Docs',\n        href: 'https://gitbook.io/',\n      },\n      {\n        label: 'Blog',\n        href: 'https://medium.com',\n      },\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://www.coingecko.com/\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, useRef } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\n\ninterface NftYouWonModalProps {\n  onDismiss?: () => void\n}\n\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`\n\nconst Actions = styled.div`\n  text-align: center;\n`\n\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n  return (\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\n      <ModalContent>\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\n        <Heading size=\"lg\" color=\"secondary\">\n          {TranslateString(999, 'You won an NFT!')}\n        </Heading>\n      </ModalContent>\n      <Actions>\n        <Button as=\"a\" href=\"/nft\">\n          {TranslateString(999, 'Go to claim NFT')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\n/**\n * 1. Checks if nft supply available\n * 2. If supply is available check if the user can claim\n * 3. If the user can claim show a modal\n */\nconst NftGlobalNotification = () => {\n  const { account } = useWallet()\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\n  const showModal = useRef(() => onPresentBurnModal())\n\n  return <div />\n}\n\nexport default NftGlobalNotification\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst NftFarms = lazy(() => import('./views/NftFarm'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/nftfarm\">\n              <NftFarms />\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      <NftGlobalNotification />\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getKingsAddress = () => {\n  return addresses.kings[chainId]\n}\nexport const getNftAddress = () => {\n  return addresses.nft[chainId]\n}\nexport const getYieldHubAddress = () => {\n  return addresses.yieldhub[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract(masterChefABI as unknown as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingCrowns('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'CROWN',\n    lpAddresses: {\n      97: '',\n      42: '0xEfcF4b62762D7513B80Fb7aBcF8FA1457E9936D2', // CROWN-BUSD LP\n    },\n    tokenSymbol: 'CROWN',\n    tokenAddresses: {\n      97: '',\n      42: '0x98378d47F93333CfEa1Fc0a6DD4e3d364DFAC8c4',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'CROWN-USDC LP',\n    lpAddresses: {\n      97: '',\n      42: '0xEfcF4b62762D7513B80Fb7aBcF8FA1457E9936D2',\n    },\n    tokenSymbol: 'CROWN',\n    tokenAddresses: {\n      97: '',\n      42: '0x98378d47F93333CfEa1Fc0a6DD4e3d364DFAC8c4',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'CROWN-MATIC LP',\n    lpAddresses: {\n      97: '',\n      42: '0x9619eCD3CC8B74d3D3CB3B60Ef924742f3c0373A',\n    },\n    tokenSymbol: 'CROWN',\n    tokenAddresses: {\n      97: '',\n      42: '0x98378d47F93333CfEa1Fc0a6DD4e3d364DFAC8c4',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 3,\n    risk: 3,\n    lpSymbol: 'KINGS-USDC LP',\n    lpAddresses: {\n      97: '',\n      42: '0x44A1CAfbe5EB163E1AAd0bC8B135683BF8471799',\n    },\n    tokenSymbol: 'KINGS',\n    tokenAddresses: {\n      97: '',\n      42: '0x6207C9B872055822CC646dF590a273d152410d9e',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    lpSymbol: 'KINGS-MATIC LP',\n    lpAddresses: {\n      97: '',\n      42: '0xEF9E50aAe5F74CbDA175163A8833b6109c9D74e3',\n    },\n    tokenSymbol: 'KINGS',\n    tokenAddresses: {\n      97: '',\n      42: '0x6207C9B872055822CC646dF590a273d152410d9e',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 5,\n    risk: 3,\n    lpSymbol: 'KINGS-CROWN LP',\n    lpAddresses: {\n      97: '',\n      42: '0xEF9E50aAe5F74CbDA175163A8833b6109c9D74e3',\n    },\n    tokenSymbol: 'KINGS',\n    tokenAddresses: {\n      97: '',\n      42: '0x6207C9B872055822CC646dF590a273d152410d9e',\n    },\n    quoteTokenSymbol: QuoteToken.CAKE,\n    quoteTokenAdresses: contracts.cake,\n  },\n  {\n    pid: 6,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      42: '0xc20cf81dfF14ce8C9b454e6Cd4B2145d81535849',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      42: '0xd0a1e359811322d97991e03f863a0c30c2cf029c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 7,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'KINGS',\n    lpAddresses: {\n      97: '',\n      42: '0x44A1CAfbe5EB163E1AAd0bC8B135683BF8471799', // kings-usdc\n    },\n    tokenSymbol: 'KINGS',\n    tokenAddresses: {\n      97: '',\n      42: '0x6207C9B872055822CC646dF590a273d152410d9e',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(abi as unknown as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n        await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, crownsPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'crownsPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        crownsPerBlock: new BigNumber(crownsPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingCrowns',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 6 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 1 // CROWN-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n"],"sourceRoot":""}