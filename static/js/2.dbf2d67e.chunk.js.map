{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","hooks/useWeb3.ts","hooks/useContract.ts","utils/erc20.ts","hooks/useHarvest.ts","config/constants/index.ts"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","enterStaking","times","toString","on","tx","transactionHash","deposit","sousStake","sousChefContract","sousStakeBnb","value","unstake","leaveStaking","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","yieldhubharvest","yieldhubContract","kingsContract","getTokenReward","soushHarvest","soushHarvestBnb","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","contractOptions","eth","Contract","contract","setContract","useCake","getCakeAddress","erc20","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useKings","kingsToken","getKingsAddress","useYieldhub","yieldhub","getYieldHubAddress","useSousChef","id","config","poolsConfig","find","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","getContract","provider","getTokenBalance","tokenAddress","userAddress","balanceOf","call","useHarvest","farmPid","dispatch","useDispatch","onReward","useCallback","txHash","fetchFarmUserDataAsync","useYieldhubHarvest","yieldHubContract","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","farmsConfig","filter","farm","isCommunity","map","tokenSymbol"],"mappings":"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","file":"static/js/2.dbf2d67e.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","/* eslint-disable no-else-return */\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } else {\n    return masterChefContract.methods\n      .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } else {\n    return masterChefContract.methods\n      .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking('0')\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } else {\n    return masterChefContract.methods\n      .deposit(pid, '0')\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n}\n\nexport const yieldhubharvest = async (yieldhubContract, account, kingsContract) => {\n  return yieldhubContract.methods\n    .getTokenReward('0x6207C9B872055822CC646dF590a273d152410d9e')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getMasterChefAddress,\n  getKingsAddress,\n  getCakeAddress,\n  getYieldHubAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n} from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport kingsToken from 'config/abi/kings.json'\nimport yieldhub from 'config/abi/yieldhub.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = ifo as unknown as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = erc20 as unknown as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = rabbitmintingfarm as unknown as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = pancakeRabbits as unknown as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = lottery as unknown as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = lotteryTicket as unknown as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = masterChef as unknown as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useKings = () => {\n  const abi = kingsToken as unknown as AbiItem\n  return useContract(abi, getKingsAddress())\n}\n\nexport const useYieldhub = () => {\n  const abi = yieldhub as unknown as AbiItem\n  return useContract(abi, getYieldHubAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = rawAbi as unknown as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, yieldhubharvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useYieldhub, useKings } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useYieldhubHarvest = () => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const yieldHubContract = useYieldhub()\n  const kingsContract = useKings()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await yieldhubharvest(yieldHubContract, account, kingsContract)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, yieldHubContract, kingsContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"],"sourceRoot":""}